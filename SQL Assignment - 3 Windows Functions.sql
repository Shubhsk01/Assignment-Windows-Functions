use mavenmovies;

-- Q1.Rank the customers based on the total amount they've spent on rentals.
-- Solution:
SELECT
     customer.first_name,
    customer.last_name,

    SUM(film.rental_rate) AS total_amount_spent,
    RANK() OVER (ORDER BY SUM(film.rental_rate) DESC) AS customer_rank
FROM
    customer 
JOIN
    rental ON customer.customer_id = rental.customer_id
JOIN
    inventory  ON rental.inventory_id = inventory.inventory_id
JOIN
    film ON inventory.film_id = film.film_id
GROUP BY
    customer.customer_id, customer.first_name, customer.last_name
ORDER BY
    total_amount_spent DESC;


--  Q2.Calculate the cumulative revenue generated by each film over time.
--  Solution:
SELECT
    f.film_id,
    f.title,
    p.payment_date,
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
JOIN
    payment p ON r.rental_id = p.rental_id
ORDER BY
    f.film_id, p.payment_date;
    

--  Q3.Determine the average rental duration for each film, considering films with similar lengths.
-- Solution
   SELECT 
    f.film_id,
    f.title,
    f.length AS film_length,
    ROUND(AVG(DATEDIFF(r.return_date, r.rental_date)),
            2) AS avg_rental_duration
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id , f.title , f.length
ORDER BY film_length;

-- Q4.Identify the top 3 films in each category based on their rental counts.
-- Solution:
WITH FilmRentalCounts AS (
    SELECT
        f.film_id,
        f.title,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count,
        ROW_NUMBER() OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS row_num
    FROM
        film f
    JOIN
        inventory i ON f.film_id = i.film_id
    JOIN
        rental r ON i.inventory_id = r.inventory_id
    JOIN
        film_category fc ON f.film_id = fc.film_id
    JOIN
        category c ON fc.category_id = c.category_id
    GROUP BY
        f.film_id,
        f.title,
        c.name,
        c.category_id
)
SELECT
    film_id,
    title,
    category_name,
    rental_count
FROM
    FilmRentalCounts
WHERE
    row_num <= 3
ORDER BY
    category_name,
    rental_count DESC;
    
--  Q5.Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.    
-- Solution:
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    customer_rentals.total_rentals,
    overall_average.avg_rentals,
    (customer_rentals.total_rentals - overall_average.avg_rentals) AS rental_difference
FROM
    customer c
JOIN (
    SELECT
        r.customer_id,
        COUNT(r.rental_id) AS total_rentals
    FROM
        rental r
    GROUP BY
        r.customer_id
) AS customer_rentals ON c.customer_id = customer_rentals.customer_id
CROSS JOIN (
    SELECT
        AVG(total_rentals) AS avg_rentals
    FROM (
        SELECT
            COUNT(r.rental_id) AS total_rentals
        FROM
            rental r
        GROUP BY
            r.customer_id
    ) AS customer_totals
) AS overall_average
ORDER BY
    rental_difference DESC;
    
--  Q6.Find the monthly revenue trend for the entire rental store over time.
--  Solution:
SELECT
    DATE_FORMAT(r.rental_date, '%Y-%m') AS month_year,
    SUM(p.amount) AS total_revenue
FROM
    rental r
JOIN
    payment p ON r.rental_id = p.rental_id
GROUP BY
    DATE_FORMAT(r.rental_date, '%Y-%m')
ORDER BY
    month_year ASC;
    
--  Q7.Identify the customers whose total spending on rentals falls within the top 20% of all customers.
--  Solution:
WITH CustomerSpending AS (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spending
    FROM
        customer c
    JOIN
        payment p ON c.customer_id = p.customer_id
    GROUP BY
        c.customer_id,
        c.first_name,
        c.last_name
),
RankedCustomers AS (
    SELECT
        *,
        NTILE(5) OVER (ORDER BY total_spending DESC) AS spending_rank
    FROM
        CustomerSpending
)
SELECT
    customer_id,
    first_name,
    last_name,
    total_spending
FROM
    RankedCustomers
WHERE
    spending_rank = 1
ORDER BY
    total_spending DESC;
    
--  Q8.Calculate the running total of rentals per category, ordered by rental count.
--  Solution:
WITH CategoryRentalCounts AS (
    SELECT
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM
        category c
    JOIN
        film_category fc ON c.category_id = fc.category_id
    JOIN
        inventory i ON fc.film_id = i.film_id
    JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        c.name
)
SELECT
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM
    CategoryRentalCounts
ORDER BY
    rental_count DESC;
    
--  Q9.Find the films that have been rented less than the average rental count for their respective categories.
--  Solution:
WITH CategoryAverages AS (
    SELECT
        fc.category_id,
        AVG(film_rentals.rental_count) AS avg_rental_count
    FROM
        film_category fc
    JOIN
        (
            SELECT
                f.film_id,
                COUNT(r.rental_id) AS rental_count
            FROM
                film f
            JOIN
                inventory i ON f.film_id = i.film_id
            JOIN
                rental r ON i.inventory_id = r.inventory_id
            GROUP BY
                f.film_id
        ) AS film_rentals ON fc.film_id = film_rentals.film_id
    GROUP BY
        fc.category_id
)
SELECT
    f.film_id,
    f.title,
    c.name AS category_name,
    film_rentals.rental_count,
    category_averages.avg_rental_count
FROM
    film f
JOIN
    film_category fc ON f.film_id = fc.film_id
JOIN
    category c ON fc.category_id = c.category_id
JOIN
    (
        SELECT
            f.film_id,
            COUNT(r.rental_id) AS rental_count
        FROM
            film f
        JOIN
            inventory i ON f.film_id = i.film_id
        JOIN
            rental r ON i.inventory_id = r.inventory_id
        GROUP BY
            f.film_id
    ) AS film_rentals ON f.film_id = film_rentals.film_id
JOIN
    CategoryAverages category_averages ON fc.category_id = category_averages.category_id
WHERE
    film_rentals.rental_count < category_averages.avg_rental_count
ORDER BY
    c.name,
    film_rentals.rental_count ASC;
    

--  Q10.Identify the top 5 months with the highest revenue and display the revenue generated in each month.
--  Solution:
WITH MonthlyRevenue AS (
    SELECT
        DATE_FORMAT(r.rental_date, '%Y-%m') AS month_year,
        SUM(p.amount) AS total_revenue
    FROM
        rental r
    JOIN
        payment p ON r.rental_id = p.rental_id
    GROUP BY
        DATE_FORMAT(r.rental_date, '%Y-%m')
)
SELECT
    month_year,
    total_revenue
FROM
    MonthlyRevenue
ORDER BY
    total_revenue DESC
LIMIT 5;
  
  
  
   
   
